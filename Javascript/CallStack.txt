The call stack is where JavaScript keeps track of function execution. 
It works in a LIFO manner. Functions get pushed when called and popped when they return. 
If an error occurs, the stack trace shows the chain of function calls



What is the Call Stack?

-The call stack is a data structure (stack = LIFO: Last In, First Out).
-It keeps track of function execution in JavaScript.
-Each time a function is called â†’ itâ€™s pushed onto the stack.
-When the function finishes â†’ itâ€™s popped off.


ðŸ”¹ Example 1 (Simple)
function first() {
  console.log("First function");
  second();
  console.log("Back to first");
}

function second() {
  console.log("Second function");
}

first();



Execution Flow in Call Stack:
1. first() pushed â†’ executes console.log("First function").
2. Calls second() â†’ pushed on top â†’ executes console.log("Second function").
3. second() finishes â†’ popped off.
4. Resume inside first() â†’ executes console.log("Back to first").
5. first() finishes â†’ popped off.
6. Stack is empty.